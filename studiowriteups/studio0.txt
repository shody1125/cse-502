Your TA's name:



Students in your studio group:

    Name: Fa Long        Student ID (begins with a 4):462512
	
1.
2.
3.
4.
5.
6.

Below each question, type in your short, to-the-point answers.

Question A1: 
	What do you see in both plots?
	> I saw a almost straight line for  tick, and broken line for time.
	Are there any differences between the two? 
	> yes, tick plot has continues grow up value, but time plot stops at middle.
	What could account for those differences?
	> since the calculation is too fast so on the value of time, it is almost the same counting 100000 or 200000.
	
Discuss this (and all your responses for this assignment) with your TA as you go.

Question A2:
	Why do the times provided for Quadratic produce such a nice plot, while the original values of Linear did not?
	>since with quadratic, the times od calcualtion actually increased a lot,especially when n grows bigger, it cost computer more time.
	
Question A3: 
	From the runs you have tried so far, how does the placement of ticker.tick() calls affect the plots you see? 
	> the tick placed in the most inner loop have the biggest effect on the shape of the curve, it makes the curve curved up.
	>the tick placed in the out side loop have little effect on the shape of the curve.
	In particular, do the changes affect the shapes of the curves, the values plotted, or both
	
Question A4: 
	In terms of n, how would you characterize, in the most simple terms, 
	the time and ticks curves that have been generated so far?
	it's a curve of n^2+n, main factor is n^2
		
Question A5: 
	What would happen if you deleted all ticker.tick() calls in the innermost loop,
	while leaving other calls to ticker.tick() that you just placed in run()?
	< the quadratic actually becomes linear.
	< the function actually becomes (0*n)^2+n+1.
	
Question B1:
	What do you see? How do the curves reflect the code inside AddsTwoNumbers?
	Do you think the value of n matters here in terms of the time it takes to perform the operation?
	Why or why not?
	< the plot is a constant value, which shows that the ticks take for addition, no matter how big is it. is always the same.
	<no, it's the same for computer calculating 1+1 and 9999+9999.
Question B2:
	What do the data and plot tell you about the time it takes to allocate an array of n integers?
	>the tick plot tells me it counts the same number while n changes, but the time plot tells me it takes longer time when n grows bigger.
	Is it reasonable to say that the line of code

 		this.array = new int[this.n]
 		
	takes a constant amount of time, independent of the value of this.n?
	<no, the time plot shows that with array grows bigger, this line cinstant more amounts of time.
Question B3:
	Do the ticks agree in shape with the time we measured in running the Allocates code?
	< the ticks actually can't reflect the things that time plots show.
Question B4:
	Are the plots more similar to each other than before?
	> yes it is.
	What does this tell you about how much time it takes to allocate an array of n integers?
	> it takes n executions for allocate an array.
Question B5:
	Which group do you expect to finish first?
	> the decimal group.
	Can you formalize, in terms of n the amount of work (ticks)
	that each group must do to write n in the form required for that group?
	> decimal group: the number of decimals n have
	> tally mark: n.
	Both groups achieve the same result, namely the recording of an integer n.

		Under what circumstances is the decimal notation more efficient than tally marks?
		> if n>=2, it is always more efficent for decimal.
		Under what circumstances is the tally mark notation more efficient than decimal notation?
		> only when n=1.
	If you are not sure, take a look the link from the assignment web page.
	
Question D1:
	How would you describe the curve you see?
	As a team, think about possible polynomial functions that could generate such a curve.
	Write your answer here:
	
Question E1:
	What is the closed form solution for T(n)?
	
Question E2:
	What is the closed form solution for T(n)?
	Can you express this result in terms of n, as well as k?
	Write your answer here:
	
	